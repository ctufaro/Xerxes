1. Start Network Receiver (ReceivePeers) - NetworkReceiver.cs
	a. in while loop, continuously accept clients
	b. once accepts, create a network peer connection
	c. start conversation
2. Start Network Seeker (SeekPeers) - NetworkSeeker.cs
	a. Seeking a hardcoded peer (X)
	b. in while loop, create stream with peer, a network peer connection
3. Optional (Gossip Infect)

public async void SeekPeersAsync()
        {
            try
            {
                Console.WriteLine("Seeking peer on '{0}'.", this.SingleSeekPoint);
                while (!this.serverCancel.IsCancellationRequested)
                {
                    using (var tcpClient = new TcpClient())
                    {
                        await tcpClient.ConnectAsync(this.SingleSeekPoint.Address, this.SingleSeekPoint.Port);
                        peers.Add(new NetworkPeer(tcpClient));
                        System.Console.WriteLine("Connected to peer, opening stream..");

                        await Task.Run(() =>
                        {
                            NetworkPeerConnection networkPeerConnection = new NetworkPeerConnection(tcpClient);
                            while (true)
                            {
                                Thread.Sleep(1000);
                                Task conversation = networkPeerConnection.ReceiveConversationAsync();
                            }
                        });
                    }
                }
            }
            catch { }
        } 



private async Task SendGossipAsync(string message, int port)
        {
            try
            {   
                
                if(!visitedPorts.ContainsKey(port))
                {                
                    using (var tcpClient = new TcpClient())
                    {
                        await tcpClient.ConnectAsync(IPAddress.Loopback, port);
                        await Task.Run(async () =>
                        {
                            NetworkStream st = tcpClient.GetStream();
                            visitedPorts.TryAdd(port,st);
                            byte[] serverResponseBytes = Encoding.UTF8.GetBytes(message);
                            await st.WriteAsync(serverResponseBytes, 0, serverResponseBytes.Length);
                        });
                    }                
                }
                else
                {
                    await Task.Run(async () =>
                    {                        
                        byte[] serverResponseBytes = Encoding.UTF8.GetBytes(message);
                        await visitedPorts[port].WriteAsync(serverResponseBytes, 0, serverResponseBytes.Length);
                    });
                }
            }
            catch { }
        }